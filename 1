#ifndef MAIN_H
#include <main.h>
#endif

#ifndef COMMON_H
#include <common.h>
#endif

#ifndef CAPTURE_H
#include <capture.h>
#endif

#ifndef DISPLAY_H
#include <display.h>
#endif

#ifndef SCALE_H
#include <scale.h>
#endif

#ifndef DECODE_H
#include <decode.h>
#endif

#ifndef DUP_H
#include <dup.h>
#endif

#define NUM_SHM_POOL    (10)

timer g_timer[TIMER_MAX];
// for initialize shared memory
bool init_shm = false;
// threads
extern thread threadInfo;

pthread_mutex_t lock_shared_memory_pool;

// announce copyright
static void announcement(void);

static void announcement(void)
{
	printf(" \n");
}

int create_link(void *param, link_type type)
{
	if (!init_shm)
	{
		if (pthread_mutex_init(&lock_shared_memory_pool, NULL) != 0)
        {
            printf("init lock fial. \n");
            return S_FAIL;
        }

		shared_memory_pool(0, NULL, 0, -1);
		init_shm = true;

		announcement();
	}

	int status = S_OK;

	switch (type)
	{
	case LINK_TYPE_CAPTURE:
		status = create_link_capture(param);
	break;
	case LINK_TYPE_DISPLAY:
		status = create_link_display(param);
	break;
	case LINK_TYPE_SCALE:
		status = create_link_scale(param);
	break;
	case LINK_TYPE_DECODE:
		status = create_link_decode(param);
	break;
	case LINK_TYPE_DUP:
		status = create_link_dup(param);
	break;
	default:
		printf("invalid link type. \n");
		status = S_FAIL;
	break;
	}

	return status;
}

int close_link(void *param, link_type type)
{
	if (init_shm)
	{
		pthread_mutex_destroy(&lock_shared_memory_pool);

		shared_memory_pool(-1, NULL, 0, -1);
		init_shm = false;

		int i;
		for (i = 0; i < THREAD_MAX; i++)
			threadInfo.status &= (~(1 << i));

		SLEEP_MSEC(50);
	}

	switch (type)
	{
	case LINK_TYPE_CAPTURE:
		close_link_capture(param);
	break;
	case LINK_TYPE_DISPLAY:
		close_link_display(param);
	break;
	case LINK_TYPE_SCALE:
		close_link_scale(param);
	break;
	case LINK_TYPE_DECODE:
		close_link_decode(param);
	break;
	case LINK_TYPE_DUP:
		close_link_dup(param);
	break;
	default:
		printf("invalid link type. \n");
		return S_FAIL;
	break;;
	}

	return S_OK;
}

int xioctl(int fd, int request, void *arg)
{
	int r;

	do r = ioctl (fd, request, arg);
	while (-1 == r && EINTR == errno);

	return r;
}

void wr_debug_cmd (void)
{
	FILE * fp;
	fp = fopen("debug_cmd", "w");
	if (fp != NULL)
	{
		fprintf(fp, "%c\n", 'z');
		fclose(fp);
	}
}

int get_vdo_resolution(VDO_RESOLUTION res, int type)
{
	if (res < VDO_RES_DEFAULT || res >= VDO_RES_MAX)
		printf("%s: invalid resolution. \n", __func__);
	else if (type < 0 || type > 1)
		printf("%s: invalid request, 0 = get width, 1 = get height. \n", __func__);

	switch (res)
    {
	case VDO_RES_1920_1080:
		if (type == 0)	return 1920;
		else			return 1080;
	break;

	case VDO_RES_1280_720:
		if (type == 0)	return 1280;
		else			return 720;
	break;

	case VDO_RES_1024_576:
		if (type == 0)	return 1024;
		else			return 576;
	break;

	case VDO_RES_960_540:
		if (type == 0)	return 960;
		else			return 540;
	break;

	case VDO_RES_848_480:
		if (type == 0)	return 848;
		else			return 480;
	break;

	case VDO_RES_640_480:
		if (type == 0)	return 640;
		else			return 480;
	break;

	case VDO_RES_640_360:
		if (type == 0)	return 640;
		else			return 360;
	break;

	case VDO_RES_424_240:
		if (type == 0)	return 424;
		else			return 240;
	break;

	case VDO_RES_320_240:
		if (type == 0)	return 320;
		else			return 240;
	break;

	case VDO_RES_320_180:
		if (type == 0)	return 320;
		else			return 180;
	break;

	case VDO_RES_160_120:
		if (type == 0)	return 160;
		else			return 120;
	break;

	default:
		printf("%s: unsupported resolution. \n", __func__);
		return S_FAIL;
	break;
	}
	return S_FAIL;
}

unsigned long long watch_timer(TIMER_NAME timer_idx)
{
	struct timeval ts, te;
	unsigned long long end_utime;

	if (g_timer[timer_idx].start_utime == 0)
	{
		gettimeofday(&ts,NULL);
		g_timer[timer_idx].start_utime = ts.tv_sec * 1000000 + ts.tv_usec;
		g_timer[timer_idx].diff_utime = 0;
	}

	gettimeofday(&te,NULL);
	end_utime = te.tv_sec * 1000000 + te.tv_usec;

	g_timer[timer_idx].diff_utime = (end_utime - g_timer[timer_idx].start_utime);

	return g_timer[timer_idx].diff_utime;
}

int init_timer(void)
{
	memset(&g_timer, 0, sizeof(timer)*TIMER_MAX);
	return S_OK;
}

int reset_timer(TIMER_NAME timer_idx)
{
	struct timeval ts;
	gettimeofday(&ts,NULL);
	g_timer[timer_idx].start_utime = ts.tv_sec * 1000000 + ts.tv_usec;
	g_timer[timer_idx].diff_utime = 0;
	return S_OK;

}

int regist_buf(ringBuf *buf, int uid_1, int uid_2)
{
	int i;
	bool new_register = true;
	static int count = 0;
	static int uid[MAX_NUM_OF_CHANNELS] = { -1 };
	static ringBuf *p_buf[MAX_NUM_OF_CHANNELS];

	for (i = 0; i < count && new_register; i++)
	{
		if (uid[i] == uid_1)
		{
			// check
			if ( (buf->sz*buf->numBufs) != (p_buf[i]->sz*p_buf[i]->numBufs) )
			{
				printf("make sure connected links have the same size of buffer. \n");
				return S_FAIL;
			}

			free_ringBuf(buf);
			buf = p_buf[i];

			new_register = false;
			uid[i] = -1;
		}
	}

	if (new_register)
	{
		uid[count] = uid_2;
		p_buf[count] = buf;
		count ++;
	}

	return S_OK;
}

void* create_shared_memory(size_t size)
{
	// Our memory buffer will be readable and writable:
	int protection = PROT_READ | PROT_WRITE;

	// The buffer will be shared (meaning other processes can access it), but
	// anonymous (meaning third-party processes cannot obtain an address for it),
	// so only this process and its children will be able to use it:
	int visibility = MAP_ANONYMOUS | MAP_SHARED;

	// The remaining parameters to `mmap()` are not important for this use case,
	// but the manpage for `mmap` explains their purpose.
	return mmap(NULL, size, protection, visibility, 0, 0);

}

int shared_memory_pool(int cmd, ringBuf *s, uint32_t size, int uid)
{
	static uint8_t* shm[NUM_SHM_POOL];
	static size_t buf_sz[NUM_SHM_POOL] = { 0 };
	static int count = 0;
	static int uid_pack[NUM_SHM_POOL] = { -1 };

	//printf("count = %d \n", count);

	int i;
	bool done = false;
	int res = 0;

	pthread_mutex_lock(&lock_shared_memory_pool);

	switch (cmd)
	{
	case 2: // get data
		if (count == 0)
		{
			//printf("shared memory is empty. \n");
			res = 0;
			break;
		}
		else if (uid < 0)
		{
			printf("invalid uid. \n");
			res = -1;
			break;
		}

		for (i = 0; i < NUM_SHM_POOL && !done; i++)
		{
			if (uid_pack[i] == uid)
			{
				uid_pack[i] = -1;

				if (put_ringBuf(s, shm[i], buf_sz[i]) == S_OK)
				{
					done = true;
					count --;

					munmap(shm[i], buf_sz[i]);
					res = buf_sz[i];
					buf_sz[i] = 0;
					break;
				}
				else
				{
					done = true;
					count --;
						
					munmap(shm[i], buf_sz[i]);
					buf_sz[i] = 0;
					res = 0;
					break;
				}
			}

		}
	break;
	case 1: // put data
		if (count == NUM_SHM_POOL -1)
		{
			printf("shared memory is full. \n");
			res = 0;
			break;
		}
		else if (uid < 0)
		{
			printf("invalid uid. \n");
			res = -1;
			break;
		}

		for (i = 0; i < NUM_SHM_POOL && !done; i++)
		{
			if (uid_pack[i] == -1)
			{
				shm[i] = (uint8_t *) create_shared_memory(size);
				if (get_ringBuf(shm[i], s, size) == S_OK)
				{
					uid_pack[i] = uid;
					buf_sz[i] = size;

					done = true;
					count ++;

					res = buf_sz[i];
					break;
				}
				else
				{
					munmap(shm[i], size);

					done = true;
					res = 0;
					break;
				}
			}
		}
	break;

	case 0:
		for (i = 0; i < NUM_SHM_POOL; i++)
		{
			uid_pack[i] = -1;
			buf_sz[i] = 0;
			//data_length[i] = 0;
		}
	break;

	case -1:
		for (i = 0; i < NUM_SHM_POOL && !done; i++)
		{
			if (buf_sz[i] > 0)
				munmap(shm[i], buf_sz[i]);
		}
	break;

	default:
	break;
	}

	pthread_mutex_unlock(&lock_shared_memory_pool);
	return res;
}

/*
 * INIT:			1 bit
 * BITSTREAM_SIZE:	16 bit
*/
#define RINGBUF_HEADER_SIZE				(32)
#define RINGBUF_HEADER_SIZE_INIT		(1)
#define RINGBUF_HEADER_SIZE_DATA_LENGTH	(24)
int set_ringbuf_reserved(ringBuf *buf, RESERVED_HEADER cmd, int s)
{
	switch (cmd)
	{
	case INIT:
		if (s != 0 && s != 1)
		{
			printf("invalid value to set the reserved 0 or 1). \n");
			return S_FAIL;
		}

		if (s)
			buf->reserved |= (1 << cmd);
		else
			buf->reserved &= (~(1 << cmd));
	break;
	case DATA_LENGTH:
	{
		#if 1
		int i;
		for (i = 1; i < 25; i++)
		{
			if (s % 2)
				buf->reserved |= (1 << i);
			else
				buf->reserved &= (~(1 << i));
		}
		#else
		void *p_buf;
		p_buf = (void *)&(buf->reserved);
		uint16_t value = (uint16_t) s;
		*((uint16_t *)(p_buf + 1)) = value;
		#endif
	}
	break;
	default:
	break;
	}

	return S_OK;
}

int get_ringbuf_reserved(ringBuf *buf, RESERVED_HEADER cmd)
{
	switch (cmd)
	{
	case INIT:
		return ((buf->reserved >> cmd)&1);
	break;
	case DATA_LENGTH:
	{
		#if 1
		int out = 0;
		int i;
		for (i = 24; i >= 1; i--)
		{
			int v = (buf->reserved >> i)&1;
			out += v*(pow( 2,(i-1) ));
		}
		return out;
		#else
		void *p_buf;
		p_buf = (void *)&(buf->reserved);
		uint16_t value = *((uint16_t *)(p_buf + 1));
		return (int) value;
		#endif
	}
	break;
	default:
		return -1;
	break;
	}
}

int get_ip(char *name, char *ip, int *port)
{
	static int d_port = 8880;

	FILE *fptr;
	fptr = fopen("ip.txt", "rb");
	if (!fptr)
	{
		MSG_SYS("%s get ip failed, give default ip \n", name);
		ip = "127.0.0.1";
		*port = d_port++;
		return S_FAIL;
	}

	char *c = NULL;
	MALLOC(c, char, 1);
	char string[IP_DEFINE_MAX_PAIRS][IP_DEFINE_MAX_WORD_LENGTH];
	int string_len[IP_DEFINE_MAX_PAIRS] = {0};
	int idx = 0, c_idx = 0, len;
	do
	{
		len = fread(c, 1, 1, fptr);
		
		if (*c != '\n')
		{
			string[idx][c_idx++] = *c;
			string_len[idx]++;
		}
		else if (*c == '\n')
		{
			c_idx = 0;
			idx++;
		}
		
	} while(len > 0);

	free(c);
	idx ++;

	printf ("%s %d \n", __func__, __LINE__);
	int i, j, found = 0;
	for (i = 0; i < idx; i++)
	{
		if (name[0] == string[i][0])
		{
			for (j = 1; j < IP_DEFINE_MAX_WORD_LENGTH; j++)
			{
				if (string[i][j] == ' ')
				{
					found = 1;
					idx = i;
					break;
				}

				if (name[j] != string[i][j])
				{
					break;
				}
			}
		}

		if (found)
			break;
	}
	
	if (!found)
	{
		MSG_SYS("%s get ip failed \n", name);
		fclose(fptr);
		return S_FAIL;
	}

	// get ip
	char *c_ip = ip;
	for (i = j; i < IP_DEFINE_MAX_WORD_LENGTH; i++)
	{
		if ((string[idx][i] != ' ') && (string[idx][i] != ':') && (string[idx][j] != '\n'))
		{
			memcpy(c_ip++, &string[idx][i], 1);
		}
		else if (string[idx][i] == ':')
			break;
		else if (string[idx][i] == '\n')
		{
			MSG_SYS("%s get ip failed \n", name);
			fclose(fptr);
			return S_FAIL;
		}
	}
	printf ("%s %d \n", __func__, __LINE__);
	
	// get port
	char tmp_port[10];
	int offset = 0;
	for (j = i; j < IP_DEFINE_MAX_WORD_LENGTH; j++)
	{
		if ((string[idx][j] != ' ') && (string[idx][j] != ':') && (string[idx][j] != '\n'))
		{
			memcpy(&tmp_port[offset++], &string[idx][j], 1);
		}

		if (j >= string_len[idx])
			break;
	}
	*port = atoi(tmp_port);
	fclose(fptr);

	return S_OK;
}

